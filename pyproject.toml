[tool.poetry]
name = "strapp"
version = "0.3.8"
description = ""
authors = []
packages = [
    { include = "strapp", from = "src" },
]
include = ["src/strapp/py.typed"]

[tool.poetry.dependencies]
python = "^3.6"

dataclasses = { version = "*", python = ">=3.6, <3.7" }
typing_extensions = { version = ">=3.10", python = "<=3.10" }

click = { version = "*", optional = true }
flask = { version = "*", optional = true }
sentry-sdk = { version = "*", optional = true }
sqlalchemy = { version = "*", optional = true }
flask_reverse_proxy = { version = "*", optional = true }
setuplog = {version = ">=0.2.2", optional = true}
backoff = {version = "^1.11.1", optional = true}
configly = {version = "*", optional = true}
datadog = {version = "*", optional = true}

[tool.poetry.dev-dependencies]
bandit = "^1.6.2"
black = "^19.10b0"
coverage = "*"
flake8 = "^3.7.9"
isort = "^4.3.21"
mypy = "^0.930"
pydocstyle = "^4.0.1"
pytest = "^6.0"
pytest-mock-resources = "*"
sqlalchemy = ">=1.4"
sqlalchemy-stubs = "*"
requests = "^2.26.0"
pytest-alembic = ">=0.6.0"
types-dataclasses = "^0.6.2"
types-requests = "^2.26.3"
types-contextvars = "^2.4.0"

[tool.poetry.extras]
click = ["click", "dataclasses"]
sqlalchemy = ["sqlalchemy"]
sentry = ["sentry-sdk"]
flask = ["flask", "flask_reverse_proxy", "dataclasses"]
http = ["backoff", "setuplog"]
datadog = ["datadog", "configly"]

[tool.black]
line_length = 100

[tool.isort]
default_section = 'FIRSTPARTY'
include_trailing_comma = true
indent = '    '
length_sort = false
line_length = 100
multi_line_output = 3
order_by_type = false
known_first_party = 'tests'
known_standard_library = 'dataclasses'
use_parentheses = true

[tool.mypy]
strict_optional = true
ignore_missing_imports = true
warn_unused_ignores = true
incremental = true
plugins = [
    'strapp.sqlalchemy.mypy',
    'sqlalchemy.ext.mypy.plugin'
]

[build-system]
requires = ["poetry>=0.12"]
build-backend = "poetry.masonry.api"
